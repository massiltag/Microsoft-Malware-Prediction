import pickle
import pandas as pd
import numpy as np
import tensorflow as tf


def csv_to_pickled_converter():
    """
    convert csv data to pickle
    :return: nothing
    """
    df = pd.read_csv("../data/csv/test.csv")
    df.to_pickle("../data/pickled/text.pkl")
    print("test file converted")
    df = pd.read_csv("../data/csv/train.csv")
    df.to_pickle("../data/pickled/train.pkl")
    print("train file converted")


def display_column_info():
    df = pd.read_pickle("../data/pickled/train.pkl")
    nb_entry = len(df.index)
    # bloqué à colonnes 8, 14, 15, 28, 29, 31, 41, 52, 53, 68
    for i in range(69, len(df.columns)):
        temp = df.iloc[:, i]
        print("i:", i)
        if len(set(temp.tolist())) < 100:
            print("True")
            print(i, ")", df.columns[i], ": ", set(temp))
            print()
    print("\nFIN")


def get_dataset(file_path, LABEL_COLUMN, **kwargs):
    dataset = tf.data.experimental.make_csv_dataset(
        file_path,
        batch_size=5, # Artificially small to make examples easier to show.
        label_name=LABEL_COLUMN,
        na_value="?",
        num_epochs=1,
        ignore_errors=True,
        **kwargs)
    return dataset


if __name__ == '__main__':
    """
    Note: column 28 (PuaMode) has different data: NaN, "on" and "audit"
    cf.
        df = pd.read_pickle("../data/pickled/train.pkl")
        df_28 = df.iloc[:, 28]
        df_28.dropna(inplace=True)
        df_28 = df_28[df_28 != "on"]
        print(df_28)
    """
    # execute this to convert to pickle for best performances
    # csv_to_pickled_converter()
    # execute this to display info about columns
    # display_column_info()

    train_file_path = "../data/csv/train.csv"
    test_file_path = "../data/csv/test.csv"

    # train_file_path = tf.keras.utils.get_file("train.csv", train_data_path)
    # test_file_path = tf.keras.utils.get_file("test.csv", test_data_path)
    # LABEL_COLUMN = 'HasDetections'
    # LABELS = [0, 1]

    # raw_train_data = get_dataset(train_file_path, LABEL_COLUMN)
    # raw_test_data = get_dataset(test_file_path, LABEL_COLUMN)

    # vérification que le test contient bien la colonne HasDetections
    df = pd.read_csv("../data/csv/test.csv")
    print(df.head())
